#!/usr/bin/env ruby
require "fileutils"

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

# user setup variables
new_project = nil

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

def ask(question)
  puts question
  STDIN.gets.chomp
end

def ask_if_new_project
  return unless new_project.nil?
  new_project = (ask("Is this a new project? (y/N)").downcase == "y")
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "\n== Installing system dependencies =="
  # Install system dependencies if Homebrew is installed
  if system('[[ (-x "$(command -v brew)") ]]')
    system("brew bundle check --no-lock --no-upgrade") || system!("brew bundle --no-upgrade --no-lock")
  else
    puts "Homebrew not installed. Skipping system dependencies installation."
  end

  puts "\n== Installing Rails dependencies =="
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")

  puts "\n== Preparing Rails credentials file =="
  if File.exist?("config/credentials.yml.enc")
    if File.exist?("config/master.key")
      puts "Encrypted credentials file and master.key exists. Skipping new credentials setup."
    else
      ask_if_new_project

      if new_project
        # delete the existing encrypted credentials file & setup a new master.key
        FileUtils.rm "config/credentials.yml.enc"
        system! "bin/rails credentials:edit"
        puts "Removed existing encrypted credentials file and created a new one with a new master.key file."
        puts "-> You need to manually copy the contents of config/credentials.sample.yml to the decrypted credentials file and populate the values needed."
      else
        # ask for the existing master key & create master.key file with the value
        puts "Enter the existing master key:"
        master_key = STDIN.gets.chomp
        File.write("config/master.key", master_key)
        puts "master.key file created."
      end

    end
  else
    puts "No encrypted credentials file found. Skipping credentials file setup."
  end

  puts "\n== Creating .env file =="
  if File.exist?(".env")
    puts ".env file exists. Skipping .env file creation."
  else
    FileUtils.cp ".env.template", ".env"
    puts ".env file created."
  end

  # Update Database name in config/database.yml
  puts "\n== Creating config/database.yml =="
  ask_if_new_project

  if new_project
    FileUtils.rm "config/database.yml" if File.exist?("config/database.yml")
  end

  if File.exist?("config/database.yml")
    puts "config/database.yml file exists. Skipping database.yml file setup."
  else
    # ask the user for the database name
    # create config.yml from template and update the database name
    puts "Enter the database name:"
    database_name = STDIN.gets.chomp
    File.write("config/database.yml", File.read("config/database.yml.template").gsub("rapid_rails", database_name))
    puts "config/database.yml file created."
  end

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  puts "\n== Restarting application server =="
  system! "bin/rails restart"

  puts "\n== Setup complete! =="
end